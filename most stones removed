class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        vector<vector<int>> adj(n);
      /*here you are making a graph by checking that it can be its adjacent nodes or not mtlb 0 or konse row mein ye 0 aur hai  0 konse row mein hai 1
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (stones[i][0] == stones[j][0] || stones[i][1] == stones[j][1]) {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }

        queue<int> q;
        vector<int> vis(n, 0);
        int comp = 0;

        for (int i = 0; i < n; i++) {
/*making componets to remove the stones*/
            if (!vis[i]) {
                q.push(i);
                vis[i] = 1;
                comp++;

                while (!q.empty()) {
                    int k = q.front();
                    q.pop();
                    for (auto it : adj[k]) {
                        if (!vis[it]) {
                            q.push(it);
                            vis[it] = 1;
                        }
                    }
                }
            }
        }

        return n - comp;
    }
};
